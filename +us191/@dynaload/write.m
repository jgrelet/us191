function write(self, varargin)
% write dynaload memory structure to ASCII CSV file (Comma Separated Value)
% nc is a dynaload objet in memory load from xls file. for example:
% >> nc = us191.dynaload('test.xls');
% >> nc
% us191.dynaload
% 
% 	file:	test.xls
% 
% 	DIMENSIONS               	us191.hashtable
% 	VARIABLES                	us191.hashtable
% 	ATTRIBUTES               	us191.hashtable
% 
% >> s = nc.VARIABLES.SSTP
% 
% s = 
%              code: 'SSTP'
%         dimension: {'DAYD'}
%            nctype: 'float'
%         long_name: 'SEA SURFACE TEMPERATURE'
%     standard_name: 'surface temperature'
%             units: 'degrees Celsius'
%       conventions: ''
%         valid_min: -1.5000
%         valid_max: 38
%            format: '%6.3lf'
%        FillValue_: 99999
%         epic_code: []
%              axis: ''
%        resolution: 1.0000e-003
%           comment: [1x99 char]
%     missing_value: [] 
%
% write(nc, 'foo.csv');
%
% >> type foo.csv
%
% datagui_profile_netcdf.csv:  0 members & 0 lines with data; VERSION = 0.000
%
% $DIMENSIONS$
% #;code;value;#
% #;char;integer;#
% #;PROFILE;120;#
% ...
% %
% $VARIABLES$
% #;code;dimension;nctype;long_name;standard_name;units;conventions;valid_min;valid_max;format;FillValue_;epic_code;axis;resolution;comment;missing_value;#
% #;char;cell;char;char;char;char;char;double;double;char;double;double;char;double;char;double;#
% #;REFERENCE_DATE_TIME;'STRING14';char;REFERENCE DATE TIME FOR JULIAN DAYS;reference date time;;yyyymmddhhmmss;;;;;;;;Reference date for julian days origin;;#
% ...
%
% $Id: write.m 625 2011-12-15 11:05:27Z jgrelet $

%% COPYRIGHT & LICENSE
%  Copyright 2009-2001 - IRD US191, all rights reserved.
%
%  This file is part of us191 Matlab package.
%
%    us191 package is free software; you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation; either version 2 of the License, or
%    (at your option) any later version.
%
%    us191 package is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program; if not, write to the Free Software
%    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
%    USA

% slip filename into path, name & extension
% -----------------------------------------
[path, name, ext] = fileparts(self.File);

% if a second arg is a file name
% -----------------------------
if isempty(varargin)
  
elseif isa(varargin{1}, 'char')
  path_ = fileparts(varargin{1});
  if isempty(path_)   
    self.File = fullfile(path,varargin{1});
  else
    self.File = varargin{1};
  end
elseif strcmpi(ext, '.xls')

  % otherwise change xls extension to csv
  % -------------------------------------
  [path, file, ext] = fileparts(regexprep(self.File, '.xls', '.csv'));
  self.File = strcat(path, file, ext);
end

  % open csv file 
  % ---------------
  self.fid = fopen(self.File, 'wt');
  if self.fid == -1
    error(['Can''t open file: ' self.File ' in write mode'])
  end

  if self.Echo
    % display information on command window
    % -------------------------------------
    fprintf('Write data file:   %s\n', self.File);
  end
  
% write comment header
% --------------------
fprintf( self.fid, ...
  '%% This file was automatically generated by dynaload class\n') ;
fprintf( self.fid, ...
  '%% Do NOT modify this file\n') ;

% write  information, loop over each dynamic properties
% -----------------------------------------------------
for k = self.meta
  
  % convert cell to char
  % --------------------
  dp = char(k);
  
  % write to file dynamic property name
  % -----------------------------------
  fprintf( self.fid, '%%\n$%s$\n', dp);
  
  % get the first struct in the hashtable
  % ------------------------------------_
  lk = keys(self.(dp));
  s = self.(dp)(lk{1});
  
  % initialise str
  % --------------
  str = '#;'; str2 = '#;';
  
  % construct 2 header lines using the type of each menber of the structure s
  % #;key__;value;unlimited;#
  % #;char;integer;logical;#
  % --------------------------------------------------------------------------
  for m = fieldnames(s)'
   
    % don't write data__ on header file
    if strcmp(char(m), 'data__') 
      continue
    end
    
    % construct line
    str = strcat(str, sprintf('%s;', char(m)));
    value = s.(char(m));
    
    if isa(value,'logical')
      str2 = strcat(str2, 'logical;');
    elseif isa(value,'char')
      str2 = strcat(str2, 'char;');
    elseif isa(value,'integer')
      str2 = strcat(str2, 'integer;');
    elseif isa(value,'single')
      str2 = strcat(str2, 'float;');
    elseif isa(value,'double')
      str2 = strcat(str2, 'double;');
    elseif iscell(value)
      str2 = strcat(str2, 'cell;');
    else
      error('dynaload.write: undefine %s value for member %s', ....
        char(value), m);
    end
  end
  str = strcat(str, '#'); str2 = strcat(str2, '#');
  fprintf( self.fid, '%s\n', str);  fprintf( self.fid, '%s\n', str2);
  
  % write data lines
  for nk = keys(self.(dp))
    nkk = char(nk);
    s = self.(dp)(nkk);
    str = '#;';
    for m = fieldnames(s)'
      value = s.(char(m));
      if islogical(value)
        format = '%d';
      elseif iscell(value)
        format = '%s';
      elseif isa(value,'char')
        format = '%s';
        %    else isa(value,'uint8')
        %      format = '%u';
      elseif isa(value,'integer')
        format = '%d';
      % format %g is used for scientific format 1e36 and %8.8g to write 99999.999  
      elseif isa(value,'single')
        format = '%8.8g';
      elseif isa(value,'double')
        format = '%8.8g';
      else
        error('dynaload.write: undefine %s value for member %s', ....
          char(value), m);
      end
      
      % don't write data__ value on file
      if ~strcmp(char(m), 'data__') 
        if isempty(value)
          str = strcat(str, ';');
        else
          if iscell(value)
            % if iscell, write 'val', or 'val1','val2', etc....
            for c = value
              % if it is last cell, add ; separator
              if strcmp(c, value{size(value,2)})
                str = strcat(str, sprintf('''%s'';', char(c)));
              else
                % add comma separator
                str = strcat(str, sprintf('''%s'',', char(c)));
              end
            end
          else
            % use strtrim to remove blank (format %8.8g)
            % ------------------------------------------
            str = strcat(str, strtrim(sprintf(strcat(format, ';'), value)));
          end
        end
      end
    end
    str = strcat(str, '#');
    fprintf( self.fid, '%s\n', str);
  end
end

% close file
% ----------
fclose(self.fid);

end
 
